Thanks for confirming â€” letâ€™s **troubleshoot and fix the exact query you're using**.

---

## âœ… Letâ€™s Debug This Properly, Step by Step

Please copy-paste and run **this minimal query below** which:

* Parses your message safely
* Does **not assume numeric fields until parsed**
* Will show parsed output in a table

---

### âœ… Safe Baseline Query (No Aggregation Yet)

```sql
fields @timestamp, @message
| parse @message '*User ID: * "RequestUri: * " Input Params:* "Total Time Taken: * "Status: *' 
  as userId, requestUri, inputParams, totalTimeStr, statusStr
| display @timestamp, userId, requestUri, inputParams, totalTimeStr, statusStr
| sort @timestamp desc
| limit 50
```

### What this does:

* Parses 5 fields: `userId`, `requestUri`, `inputParams`, `totalTimeStr`, `statusStr`
* Keeps `totalTimeStr` and `statusStr` as **strings**, so no type mismatch occurs
* Displays parsed values for debugging

---

## ðŸ§ª If That Works, THEN Try This (With type casting & stats):

fields @timestamp, @message
| parse @message '*User ID: * "RequestUri: *" Input Params:* "Total Time Taken: *" Status: *' 
    as userId, requestUri, inputParams, totalTimeStr, statusStr
| filter ispresent(requestUri) and ispresent(totalTimeStr)
| stats 
    count(*) as requestCount,
    avg(totalTimeStr) as avgTotalTime,
    max(totalTimeStr) as maxTotalTime
  by bin(1mo, @timestamp) as month, requestUri
| sort month asc



```sql
fields @timestamp, @message
| parse @message '*User ID: * "RequestUri: * " Input Params:* "Total Time Taken: * "Status: *' 
  as userId, requestUri, inputParams, totalTimeStr, statusStr
| parse totalTimeStr as totalTime:number
| parse statusStr as status:number
| stats count(*) as requestCount by bin(1M, @timestamp), requestUri
| sort @timestamp asc
```

---

## ðŸ§¯ Still Getting Error? Here's What I Need to Help You Fully:

Please tell me:

1. **Exact error message youâ€™re seeing** (e.g., `Type mismatch: expected string but got number`)
2. One or two **real log lines** (fully copied raw `@message`) â€” you can mask sensitive parts
3. Do all log messages **follow the same format** as the one in the screenshots?

---

## Bonus: Regex-Free Simpler Parser (Fallback)

If `parse` is error-prone due to double quotes or inconsistent spacing, try this:

```sql
fields @timestamp, @message
| parse @message "User ID: * \"RequestUri: * \" Input Params:* \"Total Time Taken: * \"Status: *" 
  as userId, requestUri, inputParams, totalTimeStr, statusStr
| display @timestamp, userId, requestUri, statusStr
| sort @timestamp desc
| limit 50
```

This handles literal double-quotes (`\"`) better if present in log structure.

---

Iâ€™m right here to help â€” just send me:

* What you ran
* The exact error (copy-paste it)
* A few log line samples (with UUID/user ID anonymized if needed)

And Iâ€™ll give you the **exact final working query**, ready for your dashboard.


fields @timestamp, @message
| parse @message /User ID:\s*(?<userId>[^\s"]+)/
| parse @message /RequestUri:\s*(?<requestUri>[^\s"]+)/
| parse @message /Status:\s*(?<status>\d{3})/
| parse @message /Total Time Taken:\s*(?<totalTime>\d+)/
| parse @message /[?&]countryCode=(?<countryCode>[^&\s"]+)/
| display @timestamp, userId, requestUri, status, totalTime, countryCode
| sort @timestamp desc
| limit 200

